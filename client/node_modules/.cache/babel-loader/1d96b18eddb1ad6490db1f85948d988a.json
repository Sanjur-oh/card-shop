{"ast":null,"code":"import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport axios from 'axios'; // from first demo\n// const initialStateValue = {username: \"\", email: \"\", name: \"\"}\n\nconst initialState = {\n  loading: false,\n  users: [],\n  error: ''\n}; // generates pending, fulfilled and rejected action types\n\nexport const fetchUsers = createAsyncThunk('user/fetchUsers', () => {\n  return axios.get(\"/users\").then(response => response.data);\n});\nexport const createUsers = createAsyncThunk(\"users/createUsers\", async newUsers => {\n  return fetch(`/users`, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(newUsers)\n  }).then(res => res.json());\n});\nexport const deleteUsers = createAsyncThunk(\"sneakers/deleteUsers\", async sneakerId => {\n  fetch(`/sneakers/${sneakerId}`, {\n    method: \"DELETE\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  });\n  return sneakerId;\n});\nconst userSlice = createSlice({\n  name: 'user',\n  initialState,\n  extraReducers: builder => {\n    builder.addCase(fetchUsers.pending, state => {});\n    builder.addCase(fetchUsers.fulfilled, (state, action) => {\n      state.loading = false;\n      state.users = action.payload;\n      state.error = '';\n    });\n    builder.addCase(fetchUsers.rejected, (state, action) => {\n      state.loading = false;\n      state.users = [];\n      state.error = action.error.message;\n    });\n    builder.addCase(createUsers.fulfilled, (state, action) => {\n      state.users = [...state.users, action.payload];\n    });\n  }\n}); // export const {login, logout} = userSlice.actions\n\nexport default userSlice.reducer; // import {createSlice, createAsyncThunk} from \"@reduxjs/toolkit\";\n// import axios from 'axios'\n// // from first demo\n// // const initialStateValue = {username: \"\", email: \"\", name: \"\"}\n// const initialState = { loading: false, users: [], error: '', }\n// // generates pending, fulfilled and rejected action types\n// export const fetchUsers = createAsyncThunk('user/fetchUsers', () => {\n//     return axios\n//         .get(\"/users\")\n//         .then((response) => response.data)\n// })\n// const userSlice = createSlice({\n//     name: 'user',\n//     initialState: {value: initialState },\n//     reducers: {\n//         login: ( state, action ) => {\n//             state.value = action.payload\n//         }, \n//         logout: ( state ) => {\n//             state.value = initialState\n//         },\n//     },\n// })\n// export const {login, logout} = userSlice.actions\n// export default userSlice.reducer","map":{"version":3,"names":["createSlice","createAsyncThunk","axios","initialState","loading","users","error","fetchUsers","get","then","response","data","createUsers","newUsers","fetch","method","headers","body","JSON","stringify","res","json","deleteUsers","sneakerId","userSlice","name","extraReducers","builder","addCase","pending","state","fulfilled","action","payload","rejected","message","reducer"],"sources":["/home/sanjuro/Development/code/phase-5/card-shop-project/client/src/features/userSlice.js"],"sourcesContent":["import {createSlice, createAsyncThunk} from \"@reduxjs/toolkit\";\nimport axios from 'axios'\n\n// from first demo\n// const initialStateValue = {username: \"\", email: \"\", name: \"\"}\n\nconst initialState = { loading: false, users: [], error: '', }\n\n// generates pending, fulfilled and rejected action types\nexport const fetchUsers = createAsyncThunk('user/fetchUsers', () => {\n    return axios\n        .get(\"/users\")\n        .then((response) => response.data)\n})\n\nexport const createUsers = createAsyncThunk(\n    \"users/createUsers\",\n    async (newUsers) => {\n      return fetch(`/users`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify(newUsers),\n      }).then((res) => res.json());\n    }\n  );\n\n  export const deleteUsers = createAsyncThunk(\n    \"sneakers/deleteUsers\",\n    async (sneakerId) => {\n      fetch(`/sneakers/${sneakerId}`, {\n        method: \"DELETE\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n      });\n      return sneakerId;\n    }\n  );\n\nconst userSlice = createSlice({\n    name: 'user',\n    initialState,\n    extraReducers: (builder) => {\n        builder.addCase(fetchUsers.pending, (state) => {})\n        builder.addCase(fetchUsers.fulfilled, (state, action) => {\n            state.loading = false\n            state.users = action.payload\n            state.error = ''\n        })\n        builder.addCase(fetchUsers.rejected, (state, action) => {\n            state.loading = false\n            state.users = []\n            state.error = action.error.message\n        })\n        builder.addCase(createUsers.fulfilled, (state, action) => {\n            state.users = [...state.users, action.payload];\n        })\n          \n\n    },\n})\n\n// export const {login, logout} = userSlice.actions\n\nexport default userSlice.reducer\n\n\n\n\n\n\n\n\n\n\n// import {createSlice, createAsyncThunk} from \"@reduxjs/toolkit\";\n// import axios from 'axios'\n\n// // from first demo\n// // const initialStateValue = {username: \"\", email: \"\", name: \"\"}\n\n// const initialState = { loading: false, users: [], error: '', }\n\n// // generates pending, fulfilled and rejected action types\n// export const fetchUsers = createAsyncThunk('user/fetchUsers', () => {\n//     return axios\n//         .get(\"/users\")\n//         .then((response) => response.data)\n// })\n\n// const userSlice = createSlice({\n//     name: 'user',\n//     initialState: {value: initialState },\n//     reducers: {\n//         login: ( state, action ) => {\n//             state.value = action.payload\n//         }, \n        \n//         logout: ( state ) => {\n//             state.value = initialState\n//         },\n//     },\n// })\n\n// export const {login, logout} = userSlice.actions\n\n// export default userSlice.reducer"],"mappings":"AAAA,SAAQA,WAAR,EAAqBC,gBAArB,QAA4C,kBAA5C;AACA,OAAOC,KAAP,MAAkB,OAAlB,C,CAEA;AACA;;AAEA,MAAMC,YAAY,GAAG;EAAEC,OAAO,EAAE,KAAX;EAAkBC,KAAK,EAAE,EAAzB;EAA6BC,KAAK,EAAE;AAApC,CAArB,C,CAEA;;AACA,OAAO,MAAMC,UAAU,GAAGN,gBAAgB,CAAC,iBAAD,EAAoB,MAAM;EAChE,OAAOC,KAAK,CACPM,GADE,CACE,QADF,EAEFC,IAFE,CAEIC,QAAD,IAAcA,QAAQ,CAACC,IAF1B,CAAP;AAGH,CAJyC,CAAnC;AAMP,OAAO,MAAMC,WAAW,GAAGX,gBAAgB,CACvC,mBADuC,EAEvC,MAAOY,QAAP,IAAoB;EAClB,OAAOC,KAAK,CAAE,QAAF,EAAW;IACrBC,MAAM,EAAE,MADa;IAErBC,OAAO,EAAE;MACP,gBAAgB;IADT,CAFY;IAKrBC,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeN,QAAf;EALe,CAAX,CAAL,CAMJJ,IANI,CAMEW,GAAD,IAASA,GAAG,CAACC,IAAJ,EANV,CAAP;AAOD,CAVsC,CAApC;AAaL,OAAO,MAAMC,WAAW,GAAGrB,gBAAgB,CACzC,sBADyC,EAEzC,MAAOsB,SAAP,IAAqB;EACnBT,KAAK,CAAE,aAAYS,SAAU,EAAxB,EAA2B;IAC9BR,MAAM,EAAE,QADsB;IAE9BC,OAAO,EAAE;MACP,gBAAgB;IADT;EAFqB,CAA3B,CAAL;EAMA,OAAOO,SAAP;AACD,CAVwC,CAApC;AAaT,MAAMC,SAAS,GAAGxB,WAAW,CAAC;EAC1ByB,IAAI,EAAE,MADoB;EAE1BtB,YAF0B;EAG1BuB,aAAa,EAAGC,OAAD,IAAa;IACxBA,OAAO,CAACC,OAAR,CAAgBrB,UAAU,CAACsB,OAA3B,EAAqCC,KAAD,IAAW,CAAE,CAAjD;IACAH,OAAO,CAACC,OAAR,CAAgBrB,UAAU,CAACwB,SAA3B,EAAsC,CAACD,KAAD,EAAQE,MAAR,KAAmB;MACrDF,KAAK,CAAC1B,OAAN,GAAgB,KAAhB;MACA0B,KAAK,CAACzB,KAAN,GAAc2B,MAAM,CAACC,OAArB;MACAH,KAAK,CAACxB,KAAN,GAAc,EAAd;IACH,CAJD;IAKAqB,OAAO,CAACC,OAAR,CAAgBrB,UAAU,CAAC2B,QAA3B,EAAqC,CAACJ,KAAD,EAAQE,MAAR,KAAmB;MACpDF,KAAK,CAAC1B,OAAN,GAAgB,KAAhB;MACA0B,KAAK,CAACzB,KAAN,GAAc,EAAd;MACAyB,KAAK,CAACxB,KAAN,GAAc0B,MAAM,CAAC1B,KAAP,CAAa6B,OAA3B;IACH,CAJD;IAKAR,OAAO,CAACC,OAAR,CAAgBhB,WAAW,CAACmB,SAA5B,EAAuC,CAACD,KAAD,EAAQE,MAAR,KAAmB;MACtDF,KAAK,CAACzB,KAAN,GAAc,CAAC,GAAGyB,KAAK,CAACzB,KAAV,EAAiB2B,MAAM,CAACC,OAAxB,CAAd;IACH,CAFD;EAKH;AApByB,CAAD,CAA7B,C,CAuBA;;AAEA,eAAeT,SAAS,CAACY,OAAzB,C,CAWA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA"},"metadata":{},"sourceType":"module"}